//SCREEN
#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

void heartbeat(void * parameter);
void displayTask(void * parameter);

#define LED1 25
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1 // Reset pin (or -1 if not used)

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

void setup() {
  Serial.begin(115200);
  pinMode(LED1, OUTPUT);
  display.begin(0x3C, 0x3C);
  display.clearDisplay();
  display.display();

  // Create tasks
  xTaskCreate(heartbeat, "heartbeat", 2000, (void *) LED1, 1, NULL);
  xTaskCreate(displayTask, "displayTask", 4000, NULL, 1, NULL);
}

void heartbeat(void * parameter) {
  int led = (int) parameter;

  for (;;) {
    digitalWrite(led, HIGH);
    vTaskDelay(500 / portTICK_PERIOD_MS);
    digitalWrite(led, LOW);
    vTaskDelay(500 / portTICK_PERIOD_MS);
  }
}

void displayTask(void * parameter) {
  const char *text = "Hello World!";
  int textWidth = strlen(text) * 6 * 1.75; // Width of the text (6 pixels per character * text size)
  int x = SCREEN_WIDTH; // Start the text at the far right
  int y = SCREEN_HEIGHT / 2; // Center vertically (8 pixels per line * text size)

  display.setTextWrap(false); // Disable text wrapping

  for (;;) {
    display.clearDisplay(); // Clear the display
    display.setTextSize(1.75); // Set text size
    display.setTextColor(SSD1306_WHITE); // Set text color
    display.setCursor(x, y); // Set cursor position
    display.print(text); // Print the text
    display.display(); // Update the display

    // Move the text to the left
    x -= 2;

    // Reset the text position when it scrolls completely off-screen
    if (x < -textWidth) {
      x = SCREEN_WIDTH; // Reset to the far right
    }

    vTaskDelay(20 / portTICK_PERIOD_MS); // Adjust speed of scrolling
  }
}

void loop() {
  // Empty since we're using FreeRTOS tasks
}



//LORA SEND 
#include <Arduino.h>
#include <LoRa.h>

// Define LoRa SPI and control pins based on your pinout
#define LORA_SCK  5
#define LORA_MISO 19
#define LORA_MOSI 27
#define LORA_CS   18  // NSS
#define LORA_RST  23
#define LORA_DIO0 26

void setup() {
  Serial.begin(115200);
  while (!Serial);

  Serial.println("Initializing LoRa...");

  // Manually initialize SPI with your pins
  SPI.begin(LORA_SCK, LORA_MISO, LORA_MOSI, LORA_CS);

  // Tell LoRa to use your SPI bus
  LoRa.setSPI(SPI);

  // Set LoRa control pins
  LoRa.setPins(LORA_CS, LORA_RST, LORA_DIO0);

  if (!LoRa.begin(868E6)) {
    Serial.println("LoRa init failed. Check connections or frequency.");
    while (true) {
      Serial.println("failure");
      delay(1000);
    }
  }

  Serial.println("LoRa Sender Ready");
}

void loop() {
  unsigned long timestamp = millis();  // Get the current timestamp

  Serial.println("Sending packet...");

  LoRa.beginPacket();
  LoRa.print("Timestamp: ");           // Add a label to the message
  LoRa.print(timestamp);              // Add the timestamp
  LoRa.print(" | Message: Hello!");   // The message you want to send
  LoRa.endPacket();

  delay(2000);  // Wait 2 seconds before sending another packet
}





//LORA RECIEVE
#include <Arduino.h>
#include <LoRa.h>
#include <SPI.h>

// Define LoRa SPI and control pins based on your pinout
#define LORA_SCK  5
#define LORA_MISO 19
#define LORA_MOSI 27
#define LORA_CS   18  // NSS
#define LORA_RST  23
#define LORA_DIO0 26

void setup() {
  Serial.begin(115200);
  while (!Serial);

  Serial.println("Initializing LoRa Receiver...");

  // Manually initialize SPI with your pins
  SPI.begin(LORA_SCK, LORA_MISO, LORA_MOSI, LORA_CS);

  // Tell LoRa to use your SPI bus
  LoRa.setSPI(SPI);

  // Set LoRa control pins
  LoRa.setPins(LORA_CS, LORA_RST, LORA_DIO0);

  if (!LoRa.begin(868E6)) {
    Serial.println("LoRa init failed. Check connections or frequency.");
    while (true) {
      Serial.println("failure");
      delay(1000);
    }
  }

  Serial.println("LoRa Receiver Ready");
}

void loop() {
  int packetSize = LoRa.parsePacket();
  if (packetSize) {
    Serial.print("Received packet: ");
    
    // Read and print the message byte by byte
    while (LoRa.available()) {
      Serial.print((char)LoRa.read());
    }
    
    Serial.println();
  }
}

